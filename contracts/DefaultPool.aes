@compiler >= 6

include "Option.aes"
include "./dependencies/SafeMath.aes"
include "./interfaces/IDefaultPool.aes"
include "./interfaces/ITroveManager.aes"
include "./interfaces/IActivePool.aes"
include "./dependencies/Utils.aes"

/*
 * The Default Pool holds the AE and AEUSD debt (but not AEUSD tokens) from liquidations that have been redistributed
 * to active troves but not yet "applied", i.e. not yet recorded on a recipient active trove's struct.
 *
 * When a trove makes an operation that applies its pending AE and AEUSD debt, its pending AE and AEUSD debt is moved
 * from the Default Pool to the Active Pool.
 */

contract DefaultPool =
    //------------------------------------------------------------------------------
    // DATA & STATE
    //------------------------------------------------------------------------------

    record addresses = {
          trove_manager: ITroveManager
	, active_pool: IActivePool
        }

    record state = {
          owner: option(address)
        , addresses: option(addresses)
	, ae: int
	, ausd_debt: int
        }

    entrypoint init() =
        Chain.event( OwnershipTransferred(Utils.zero_address(),Call.caller) )
        {  owner = Some(Call.caller)
         , addresses = None
	 , ae = 0
	 , ausd_debt = 0
         }

    stateful entrypoint set_addresses(addresses: addresses) =
      //requirement
      only_owner()

      put(state{addresses = Some(addresses)})

      Chain.event(TroveManagerAddressChanged(addresses.trove_manager))
      Chain.event(ActivePoolAddressChanged(addresses.active_pool))

      renounce_ownership()

    // --- Getters for public variables. Required by IPool interface ---

    /*
    * Returns the AE state variable.
    *
    * Not necessarily equal to the the contract's raw AE balance - ae can be forcibly sent to contracts.
    */
    entrypoint get_ae(): int = state.ae
    entrypoint get_aeusd_debt(): int = state.ausd_debt

    // --- Pool functionality ---

    stateful entrypoint send_ae_to_active_pool(amount: int) = with_addresses((addresses) =>
        require_caller_is_trove_manager()
        let ae = SafeMath.sub(state.ae, amount)
        Chain.event(DefaultPoolAEBalanceUpdated(ae))
        Chain.event(AESent(addresses.active_pool, amount))

      	Chain.spend(addresses.active_pool.address, amount)
      )

    stateful entrypoint increse_ausd_debt(amount: int) =
      // requirement
      require_caller_is_trove_manager()
      let ausd_debt = SafeMath.add(state.ausd_debt, amount)
      put( state { ausd_debt = ausd_debt } )
      Chain.event(DefaultPoolAEUSDDebtUpdated(ausd_debt))

    stateful entrypoint decrease_ausd_debt(amount: int) =
      // requirement
      require_caller_is_trove_manager()
      let ausd_debt = SafeMath.sub(state.ausd_debt, amount)
      put( state { ausd_debt = ausd_debt } )
      Chain.event(DefaultPoolAEUSDDebtUpdated(ausd_debt))

    payable stateful entrypoint receive_ae() =
        require_caller_is_active_pool()
        put( state { ae @ p = p + Call.value } )
        Chain.event( DefaultPoolAEBalanceUpdated(state.ae) )

    // --- 'require' functions ---

    function require_caller_is_trove_manager() = with_addresses((addresses) =>
        require(Call.caller == addresses.trove_manager.address, "CollSurplusPool: Caller is not the TroveManager")
      )

    function require_caller_is_active_pool() = with_addresses((addresses) =>
        require(Call.caller == addresses.active_pool.address, "CollSurplusPool: Caller is not the ActivePool")
      )

    function with_addresses(f: (addresses) => 'a ): 'a = switch(state.addresses)
        None => abort("no addresses")
        Some(addresses) => f(addresses)

    //------------------------------------------------------------------------------
    // EVENTS
    //------------------------------------------------------------------------------

    datatype event
        = TroveManagerAddressChanged(ITroveManager /*_newTroveManagerAddress*/)
        | ActivePoolAddressChanged(IActivePool /*_activePoolAddress*/)
        | DefaultPoolAEUSDDebtUpdated(int /*ausd_debt*/)
        | DefaultPoolAEBalanceUpdated(int /*ae*/)
	| AESent(IActivePool /*account*/, int /*amount*/)
//#inject "./dependencies/Ownable.events.aes"

    //------------------------------------------------------------------------------
    // EXTENTIONS
    //------------------------------------------------------------------------------

//#inject "./dependencies/Ownable.functions.aes"




