@compiler >= 6

include "Option.aes"
include "String.aes"
include "../interfaces/ILQTYToken.aes"
include "../dependencies/SafeMath.aes"
include "../dependencies/Utils.aes"

/*
* The lockup contract architecture utilizes a single LockupContract, with an unlockTime. The unlockTime is passed as an argument 
* to the LockupContract's constructor. The contract's balance can be withdrawn by the beneficiary when block.timestamp > unlockTime. 
* At construction, the contract checks that unlockTime is at least one year later than the Liquity system's deployment time. 

* Within the first year from deployment, the deployer of the LQTYToken (Liquity AG's address) may transfer LQTY only to valid 
* LockupContracts, and no other addresses (this is enforced in LQTYToken.sol's transfer() function).
* 
* The above two restrictions ensure that until one year after system deployment, LQTY tokens originating from Liquity AG cannot 
* enter circulating supply and cannot be staked to earn system revenue.
*/

contract LockupContract =

    record state = {
	  lqty_token: ILQTYToken
	, beneficiary: address
        , unlock_time: int
        }

    entrypoint init(unlock_time: int, lqty_token: ILQTYToken, beneficiary: address) =
    	let system_deployment_time = lqty_token.get_deployment_start_time()
        require_unlock_time_is_at_least_one_year_after_system_deployment(system_deployment_time, unlock_time)
        Chain.event(LockupContractCreated(beneficiary, unlock_time))	
        {  
	   lqty_token = lqty_token
	 , beneficiary = beneficiary
        /*
        * Set the unlock time to a chosen instant in the future, as long as it is at least 1 year after
        * the system was deployed 
        */
	 , unlock_time = unlock_time
         }

    // constants
    function miliseconds_in_one_year() : int = 31536000000

    stateful entrypoint withdraw_lqty() : unit = 
      require_caller_is_beneficiary()
      require_lockup_duration_passed()

      let lqty_balance = Option.default(0,state.lqty_token.balance(Contract.address))
      state.lqty_token.transfer(state.beneficiary, lqty_balance)
      Chain.event(LockupContractEmptied(lqty_balance))

    // --- 'require' functions --- 
    stateful function require_caller_is_beneficiary() : unit = 
      require(state.beneficiary == Call.caller , "LockupContract: caller is not the beneficiary")

    function require_lockup_duration_passed() : unit = 
      require(Chain.timestamp >= state.unlock_time , "LockupContract: The lockup duration must have passed")

    function require_unlock_time_is_at_least_one_year_after_system_deployment(system_deployment_time: int, unlock_time: int) : unit = 
      require(unlock_time >= SafeMath.add(system_deployment_time, miliseconds_in_one_year()) , "LockupContract: unlock time must be at least one year after system deployment")

    // --- Events ---
    datatype event
      = LockupContractCreated(address /*beneficiary*/, int /*unlockTime*/)
      | LockupContractEmptied(int /*lqtyWithdrawal*/)
    


    
