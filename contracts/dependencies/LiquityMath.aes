include "./SafeMath.aes"
include "./Utils.aes"

namespace LiquityMath =

    /* Precision for Nominal ICR (independent of price). Rationale for the value:
    *
    * - Making it “too low” could lead to an ICR equal to zero, due to truncation from Sophia floor division.
    *
    * This value of 1e20 is chosen for safety: the NICR will only overflow for numerator > ~1e39 AE,
    * and will only truncate to 0 if the denominator is at least 1e20 times greater than the numerator.
    *
    */
    function nicr_precision() = 100000000000000000000 //1e20

    function min(a: int, b: int) = if (a < b) a else b
    function max(a: int, b: int) = if (a >= b) a else b

    /*
    * Multiply two decimal numbers and use normal rounding rules:
    * -round product up if 19'th mantissa digit >= 5
    * -round product down if 19'th mantissa digit < 5
    *
    * Used only inside the exponentiation, _decPow().
    */
    function dec_mul(x: int, y: int) =
        let prod_xy = x * y
        SafeMath.div(
            SafeMath.add(prod_xy,Utils.decimal_precision() / 2),
            Utils.decimal_precision()
            )
    /*
    * _decPow: Exponentiation function for 18-digit decimal base, and integer exponent n.
    *
    * Uses the efficient "exponentiation by squaring" algorithm. O(log(n)) complexity.
    *
    * Called by two functions that represent time in units of minutes:
    * 1) TroveManager._calcDecayedBaseRate
    * 2) CommunityIssuance._getCumulativeIssuanceFraction
    *
    * The exponent is capped to avoid reverting due to overflow. The cap 525600000 equals
    * "minutes in 1000 years": 60 * 24 * 365 * 1000
    *
    * If a period of > 1000 years is ever used as an exponent in either of the above functions, the result will be
    * negligibly different from just passing the cap, since:
    *
    * In function 1), the decayed base rate will be 0 for 1000 years or > 1000 years
    * In function 2), the difference in tokens issued at 1000 years and any time > 1000 years, will be negligible
    */
    function
        dec_pow:(int, int) => int
        dec_pow(base, 0) = Utils.decimal_precision()
        dec_pow(base, minutes) =

            //TODO: don't think we need this
            /*if (minutes > 525600000) {minutes = 525600000}  // cap to avoid overflow*/

            // Exponentiation-by-squaring
            dec_pow'( base, Utils.decimal_precision(), minutes )

    function
        dec_pow': (int,int,int) => int
        dec_pow'(x,y,n) | n =< 1 = dec_mul(x,y)
        dec_pow'(x,y,n) | n mod 2 == 0 = dec_pow'(
                dec_mul(x,x),
                y,
                n/2
            )
        dec_pow'(x,y,n) = dec_pow'(
                dec_mul(x,x),
                dec_mul(x,y),
                (n-1)/2
            )

    function get_absolute_difference(a: int, b: int) =
        if (a >= b) SafeMath.sub(a,b) else SafeMath.sub(b,a)

    function
        compute_nominal_cr: (int, int) => int
        compute_nominal_cr(coll, debt) | debt > 0 =
            SafeMath.div(coll * nicr_precision(),debt)
        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents "infinite" CR.
        compute_nominal_cr(coll, debt) = 2^256 - 1

    function
        compute_cr: (int, int,  int) => int
        compute_cr(coll, debt, price) | debt > 0 =
            SafeMath.div(coll * price,debt)
        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents "infinite" CR.
        compute_cr(coll, debt, price) = 2^256 - 1
