/**
 * Based on OpenZeppelin's Ownable contract:
 * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol
 *
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
    /*address private _owner;*/

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */

    /**
     * @dev Returns the address of the current owner.
     */
    entrypoint owner() = state.owner

    /**
     * @dev Throws if called by any account other than the owner.
     */
    function only_owner() =
        require(is_owner(), "Ownable: caller is not the owner")

    /**
     * @dev Returns true if the caller is the current owner.
     */
    function is_owner() =
        Some(Call.caller) == state.owner

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     *
     * NOTE: This function is not safe, as it doesnâ€™t check owner is calling it.
     * Make sure you check it before calling it.
     */
    stateful function renounce_ownership() =
        let owner = Option.force_msg(state.owner,"Ownable: no owner set")
        Chain.event(OwnershipTransferred(owner, Utils.zero_address()))
        put(state{owner = None})
