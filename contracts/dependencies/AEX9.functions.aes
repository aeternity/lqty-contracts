
    entrypoint owner() = state.owner
    
    // Get the balances state
    entrypoint balances() : balances = state.balances

    // Get balance for address of `owner`
    // returns option(int)
    // If the `owner` address haven't had any token balance
    // in this smart contract the return value is None
    // Otherwise Some(int) is returned with the current balance
    entrypoint balance(account: address) : option(int) =
      Map.lookup(account, state.balances)

    // INTERNAL FUNCTIONS

    function require_non_negative_value(value : int) =
      require(value >= 0, "NON_NEGATIVE_VALUE_REQUIRED")

    function require_balance(account : address, value : int) =
      switch(balance(account))
        Some(balance) =>
          require(balance >= value, "ACCOUNT_INSUFFICIENT_BALANCE")
        None => abort("BALANCE_ACCOUNT_NOT_EXISTENT")

    stateful function internal_transfer(from_account: address, to_account: address, value: int) =
      require_non_negative_value(value)
      require_balance(from_account, value)
      put(state{ balances[from_account] @ b = b - value })
      put(state{ balances[to_account = 0] @ b = b + value })
      Chain.event(Transfer(from_account, to_account, value))

    function require_allowance_not_existent(allowance_accounts : allowance_accounts) =
      switch(allowance(allowance_accounts))
        None => None
        Some(_) => abort("ALLOWANCE_ALREADY_EXISTENT")

    function require_allowance(allowance_accounts : allowance_accounts, value : int) : int =
      switch(allowance(allowance_accounts))
        Some(allowance) =>
          require_non_negative_value(allowance + value)
          allowance
        None => abort("ALLOWANCE_NOT_EXISTENT")

    stateful function internal_change_allowance(allowance_accounts : allowance_accounts, value_change : int) =
      let allowance = require_allowance(allowance_accounts, value_change)
      let new_allowance = allowance + value_change
      require_non_negative_value(new_allowance)
      put(state{ allowances[allowance_accounts] = new_allowance })
      Chain.event(Allowance(allowance_accounts.from_account, allowance_accounts.for_account, new_allowance))
