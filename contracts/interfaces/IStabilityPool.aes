// SPDX-License-Identifier: MIT

include "./ICommunityIssuance.aes"

@compiler >= 6

/*
 * The Stability Pool holds LUSD tokens deposited by Stability Pool depositors.
 *
 * When a trove is liquidated, then depending on system conditions, some of its LUSD debt gets offset with
 * LUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of LUSD tokens in the Stability Pool is burned.
 *
 * Thus, a liquidation causes each depositor to receive a LUSD loss, in proportion to their deposit as a share of total deposits.
 * They also receive an AE gain, as the AE collateral of the liquidated trove is distributed among Stability depositors,
 * in the same proportion.
 *
 * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%
 * of the total LUSD in the Stability Pool, depletes 40% of each deposit.
 *
 * A deposit that has experienced a series of liquidations is termed a "compounded deposit": each liquidation depletes the deposit,
 * multiplying it by some factor in range ]0,1[
 *
 * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / AE gain derivations:
 * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf
 *
 * --- LQTY ISSUANCE TO STABILITY POOL DEPOSITORS ---
 *
 * An LQTY issuance event occurs at every deposit operation, and every liquidation.
 *
 * Each deposit is tagged with the address of the front end through which it was made.
 *
 * All deposits earn a share of the issued LQTY in proportion to the deposit as a share of total deposits. The LQTY earned
 * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.
 *
 * Please see the system Readme for an overview:
 * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers
 */
contract interface IStabilityPool =

    // --- Events ---

    //event StabilityPoolAEBalanceUpdated(uint _newBalance);
    //event StabilityPoolLUSDBalanceUpdated(uint _newBalance);

    //event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);
    //event TroveManagerAddressChanged(address _newTroveManagerAddress);
    //event ActivePoolAddressChanged(address _newActivePoolAddress);
    //event DefaultPoolAddressChanged(address _newDefaultPoolAddress);
    //event LUSDTokenAddressChanged(address _newLUSDTokenAddress);
    //event SortedTrovesAddressChanged(address _newSortedTrovesAddress);
    //event PriceFeedAddressChanged(address _newPriceFeedAddress);
    //event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);

    //event P_Updated(uint _P);
    //event S_Updated(uint _S, uint128 _epoch, uint128 _scale);
    //event G_Updated(uint _G, uint128 _epoch, uint128 _scale);
    //event EpochUpdated(uint128 _currentEpoch);
    //event ScaleUpdated(uint128 _currentScale);

    //event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);
    //event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);

    //event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);
    //event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);
    //event UserDepositChanged(address indexed _depositor, uint _newDeposit);
    //event FrontEndStakeChanged(address indexed _frontEnd, uint _newFrontEndStake, address _depositor);

    //event AEGainWithdrawn(address indexed _depositor, uint _AE, uint _LUSDLoss);
    //event LQTYPaidToDepositor(address indexed _depositor, uint _LQTY);
    //event LQTYPaidToFrontEnd(address indexed _frontEnd, uint _LQTY);
    //event EtherSent(address _to, uint _amount);

    // --- Functions ---

    /*
     * Called only once on init, to set addresses of other Liquity contracts
     * Callable only by owner, renounces ownership at the end
     */
    stateful entrypoint set_addresses: (
          address       // borrowerOperationsAddress, //TODO: this creates cyclic reference
        , address       // troveManagerAddress,
        , IActivePool   // activePoolAddress,
        , address       // aeusdTokenAddress,
        , address            // sortedTrovesAddress,
        , address            // priceFeedAddress,
        , ICommunityIssuance       // communityIssuanceAddress
        ) => unit

    /*
     * Initial checks:
     * - Frontend is registered or zero address
     * - Sender is not a registered frontend
     * - _amount is not zero
     * ---
     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends
     * - Tags the deposit with the provided front end tag param, if it's a new deposit
     * - Sends depositor's accumulated gains (LQTY, AE) to depositor
     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end
     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.
     */
    stateful entrypoint provide_to_sp: (int /*amount*/, address /*frontEndTag*/) => unit

    /*
     * Initial checks:
     * - _amount is zero or there are no under collateralized troves left in the system
     * - User has a non zero deposit
     * ---
     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends
     * - Removes the deposit's front end tag if it is a full withdrawal
     * - Sends all depositor's accumulated gains (LQTY, AE) to depositor
     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end
     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.
     *
     * If _amount > userDeposit, the user withdraws all of their compounded deposit.
     */
    stateful entrypoint withdraw_from_sp: (int /*amount*/) => unit

    /*
     * Initial checks:
     * - User has a non zero deposit
     * - User has an open trove
     * - User has some AE gain
     * ---
     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends
     * - Sends all depositor's LQTY gain to  depositor
     * - Sends all tagged front end's LQTY gain to the tagged front end
     * - Transfers the depositor's entire AE gain from the Stability Pool to the caller's trove
     * - Leaves their compounded deposit in the Stability Pool
     * - Updates snapshots for deposit and tagged front end stake
     */
    stateful entrypoint withdraw_ae_gain_to_trove: (address /*upperHint*/, address /*lowerHint*/) => unit

    /*
     * Initial checks:
     * - Frontend (sender) not already registered
     * - User (sender) has no deposit
     * - _kickbackRate is in the range [0, 100%]
     * ---
     * Front end makes a one-time selection of kickback rate upon registering
     */
    stateful entrypoint register_front_end: (int /*uint _kickbackRate*/) => unit

    /*
     * Initial checks:
     * - Caller is TroveManager
     * ---
     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)
     * and transfers the Trove's AE collateral from ActivePool to StabilityPool.
     * Only called by liquidation functions in the TroveManager.
     */
    stateful entrypoint offset: (int /*uint debt*/, int /*uint coll*/) => unit

    /*
     * Returns the total amount of AE held by the pool, accounted in an internal variable instead of `balance`,
     * to exclude edge cases like AE received from a self-destruct.
     */
    entrypoint get_ae: () => int

    /*
     * Returns LUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.
     */
    entrypoint get_total_aeusd_deposits: () => int

    /*
     * Calculates the AE gain earned by the deposit since its last snapshots were taken.
     */
    entrypoint get_depositor_ae_gain:(address /*depositor*/) => int

    /*
     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.
     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.
     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through
     * which they made their deposit.
     */
    entrypoint get_depositor_lqty_gain: (address /*depositor*/) => int

    /*
     * Return the LQTY gain earned by the front end.
     */
    entrypoint get_front_end_lqty_gain: (address /*frontEnd*/) =>  int

    /*
     * Return the user's compounded deposit.
     */
    entrypoint get_compounded_aeusd_deposit: (address /*depositor*/) => int

    /*
     * Return the front end's compounded stake.
     *
     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.
     */
    entrypoint get_compounded_front_end_stake: (address /*frontEnd*/) => int

    /*
     * Fallback function
     * Only callable by Active Pool, it just accounts for AE received
     * receive() external payable;
     */
