// SPDX-License-Identifier: MIT

@compiler >= 6

include "Option.aes"
include "./interfaces/IBorrowerOperations.aes"
include "./interfaces/IStabilityPool.aes"
include "./interfaces/ITroveManager.aes"
include "./interfaces/IAEUSDToken.aes"
include "./interfaces/ISortedTroves.aes"
include "./interfaces/ICommunityIssuance.aes"
include "./interfaces/IActivePool.aes"
include "./interfaces/IDefaultPool.aes"
include "./dependencies/Utils.aes"
include "./dependencies/SafeMath.aes"
include "./dependencies/LiquityMath.aes"
/*include "./dependencies/LiquitySafeMath128.aes"*/

/*
 * The Stability Pool holds AEUSD tokens deposited by Stability Pool depositors.
 *
 * When a trove is liquidated, then depending on system conditions, some of its AEUSD debt gets offset with
 * AEUSD in the Stability Pool:  that is, the offset debt evaporates, and an equal amount of AEUSD tokens in the Stability Pool is burned.
 *
 * Thus, a liquidation causes each depositor to receive a AEUSD loss, in proportion to their deposit as a share of total deposits.
 * They also receive an AE gain, as the AE collateral of the liquidated trove is distributed among Stability depositors,
 * in the same proportion.
 *
 * When a liquidation occurs, it depletes every deposit by the same fraction: for example, a liquidation that depletes 40%
 * of the total AEUSD in the Stability Pool, depletes 40% of each deposit.
 *
 * A deposit that has experienced a series of liquidations is termed a "compounded deposit": each liquidation depletes the deposit,
 * multiplying it by some factor in range ]0,1[
 *
 *
 * --- IMPLEMENTATION ---
 *
 * We use a highly scalable method of tracking deposits and AE gains that has O(1) complexity.
 *
 * When a liquidation occurs, rather than updating each depositor's deposit and AE gain, we simply update two state variables:
 * a product P, and a sum S.
 *
 * A mathematical manipulation allows us to factor out the initial deposit, and accurately track all depositors' compounded deposits
 * and accumulated AE gains over time, as liquidations occur, using just these two variables P and S. When depositors join the
 * Stability Pool, they get a snapshot of the latest P and S: P_t and S_t, respectively.
 *
 * The formula for a depositor's accumulated AE gain is derived here:
 * https://github.com/liquity/dev/blob/main/packages/contracts/mathProofs/Scalable%20Compounding%20Stability%20Pool%20Deposits.pdf
 *
 * For a given deposit d_t, the ratio P/P_t tells us the factor by which a deposit has decreased since it joined the Stability Pool,
 * and the term d_t * (S - S_t)/P_t gives us the deposit's total accumulated AE gain.
 *
 * Each liquidation updates the product P and sum S. After a series of liquidations, a compounded deposit and corresponding AE gain
 * can be calculated using the initial deposit, the depositor‚Äôs snapshots of P and S, and the latest values of P and S.
 *
 * Any time a depositor updates their deposit (withdrawal, top-up) their accumulated AE gain is paid out, their new deposit is recorded
 * (based on their latest compounded deposit and modified by the withdrawal/top-up), and they receive new snapshots of the latest P and S.
 * Essentially, they make a fresh deposit that overwrites the old one.
 *
 *
 * --- SCALE FACTOR ---
 *
 * Since P is a running product in range ]0,1] that is always-decreasing, it should never reach 0 when multiplied by a number in range ]0,1[.
 * Unfortunately, Solidity floor division always reaches 0, sooner or later.
 *
 * A series of liquidations that nearly empty the Pool (and thus each multiply P by a very small number in range ]0,1[ ) may push P
 * to its 18 digit decimal limit, and round it to 0, when in fact the Pool hasn't been emptied: this would break deposit tracking.
 *
 * So, to track P accurately, we use a scale factor: if a liquidation would cause P to decrease to <1e-9 (and be rounded to 0 by Solidity),
 * we first multiply P by 1e9, and increment a currentScale factor by 1.
 *
 * The added benefit of using 1e9 for the scale factor (rather than 1e18) is that it ensures negligible precision loss close to the
 * scale boundary: when P is at its minimum value of 1e9, the relative precision loss in P due to floor division is only on the
 * order of 1e-9.
 *
 * --- EPOCHS ---
 *
 * Whenever a liquidation fully empties the Stability Pool, all deposits should become 0. However, setting P to 0 would make P be 0
 * forever, and break all future reward calculations.
 *
 * So, every time the Stability Pool is emptied by a liquidation, we reset P = 1 and currentScale = 0, and increment the currentEpoch by 1.
 *
 * --- TRACKING DEPOSIT OVER SCALE CHANGES AND EPOCHS ---
 *
 * When a deposit is made, it gets snapshots of the currentEpoch and the currentScale.
 *
 * When calculating a compounded deposit, we compare the current epoch to the deposit's epoch snapshot. If the current epoch is newer,
 * then the deposit was present during a pool-emptying liquidation, and necessarily has been depleted to 0.
 *
 * Otherwise, we then compare the current scale to the deposit's scale snapshot. If they're equal, the compounded deposit is given by d_t * P/P_t.
 * If it spans one scale change, it is given by d_t * P/(P_t * 1e9). If it spans more than one scale change, we define the compounded deposit
 * as 0, since it is now less than 1e-9'th of its initial value (e.g. a deposit of 1 billion AEUSD has depleted to < 1 AEUSD).
 *
 *
 *  --- TRACKING DEPOSITOR'S AE GAIN OVER SCALE CHANGES AND EPOCHS ---
 *
 * In the current epoch, the latest value of S is stored upon each scale change, and the mapping (scale -> S) is stored for each epoch.
 *
 * This allows us to calculate a deposit's accumulated AE gain, during the epoch in which the deposit was non-zero and earned AE.
 *
 * We calculate the depositor's accumulated AE gain for the scale at which they made the deposit, using the AE gain formula:
 * e_1 = d_t * (S - S_t) / P_t
 *
 * and also for scale after, taking care to divide the latter by a factor of 1e9:
 * e_2 = d_t * S / (P_t * 1e9)
 *
 * The gain in the second scale will be full, as the starting point was in the previous scale, thus no need to subtract anything.
 * The deposit therefore was present for reward events from the beginning of that second scale.
 *
 *        S_i-S_t + S_{i+1}
 *      .<--------.------------>
 *      .         .
 *      . S_i     .   S_{i+1}
 *   <--.-------->.<----------->
 *   S_t.         .
 *   <->.         .
 *      t         .
 *  |---+---------|-------------|-----...
 *         i            i+1
 *
 * The sum of (e_1 + e_2) captures the depositor's total accumulated AE gain, handling the case where their
 * deposit spanned one scale change. We only care about gains across one scale change, since the compounded
 * deposit is defined as being 0 once it has spanned more than one scale change.
 *
 *
 * --- UPDATING P WHEN A LIQUIDATION OCCURS ---
 *
 * Please see the implementation spec in the proof document, which closely follows on from the compounded deposit / AE gain derivations:
 * https://github.com/liquity/liquity/blob/master/papers/Scalable_Reward_Distribution_with_Compounding_Stakes.pdf
 *
 *
 * --- LQTY ISSUANCE TO STABILITY POOL DEPOSITORS ---
 *
 * An LQTY issuance event occurs at every deposit operation, and every liquidation.
 *
 * Each deposit is tagged with the address of the front end through which it was made.
 *
 * All deposits earn a share of the issued LQTY in proportion to the deposit as a share of total deposits. The LQTY earned
 * by a given deposit, is split between the depositor and the front end through which the deposit was made, based on the front end's kickbackRate.
 *
 * Please see the system Readme for an overview:
 * https://github.com/liquity/dev/blob/main/README.md#lqty-issuance-to-stability-providers
 *
 * We use the same mathematical product-sum approach to track LQTY gains for depositors, where 'G' is the sum corresponding to LQTY gains.
 * The product P (and snapshot P_t) is re-used, as the ratio P/P_t tracks a deposit's depletion due to liquidations.
 *
 */
contract StabilityPool =
    //------------------------------------------------------------------------------
    // CONSTANTS
    //------------------------------------------------------------------------------

    function scale_factor() = 1000000000

    //------------------------------------------------------------------------------
    // DATA & STATE
    //------------------------------------------------------------------------------
    record addresses = {
        borrower_operations: IBorrowerOperations
      , trove_manager: ITroveManager
      , aeusd_token: IAEUSDToken
      // Needed to check if there are pending liquidations
      , sorted_troves: ISortedTroves
      , community_issuance: ICommunityIssuance
      , active_pool: IActivePool
      , default_pool: IDefaultPool
      , price_feed: IPriceFeed
      }

    record front_end = {
        kickback_rate: int
      , registered: bool
      }

    record deposit = {
        initial_value: int
      , front_end_tag: address
      }

    record snapshots = {
        s: int
      , p: int
      , g: int
      , scale: int
      , epoch: int
      }

    record state = {
        owner: option(address)
      , addresses: option(addresses)
      , ae: int  // deposited ae tracker
      // Tracker for AEUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.
      , total_aeusd_deposits: int
      , deposits: map(address, deposit) // depositor address -> Deposit struct
      , deposit_snapshots: map(address, snapshots) // depositor address -> snapshots struct
      , front_ends: map(address, front_end) // front end address -> FrontEnd struct
      , front_end_stakes: map(address, int) // front end address -> last recorded total deposits, tagged with that front end
      , front_end_snapshots: map(address, snapshots) // front end address -> snapshots struct
      /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,
      * after a series of liquidations have occurred, each of which cancel some AEUSD debt with the deposit.
      *
      * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t
      * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.
      */
      , p: int
      // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1
      , current_scale: int
      // With each offset that fully empties the Pool, the epoch is incremented by 1
      , current_epoch: int
      /* AE Gain sum 'S': During its lifetime, each deposit d_t earns an AE gain of ( d_t * [S - S_t] )/P_t, where S_t
      * is the depositor's snapshot of S taken at the time t when the deposit was made.
      *
      * The 'S' sums are stored in a nested mapping (epoch => scale => sum):
      *
      * - The inner mapping records the sum S at different scales
      * - The outer mapping records the (scale => sum) mappings, for different epochs.
      */
      , epoch_to_scale_to_sum: map(int,map(int,int))

      /*
      * Similarly, the sum 'G' is used to calculate LQTY gains. During it's lifetime, each deposit d_t earns a LQTY gain of
      *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the deposit was made.
      *
      *  LQTY reward events occur are triggered by depositor operations (new deposit, topup, withdrawal), and liquidations.
      *  In each case, the LQTY reward is issued (i.e. G is updated), before other state changes are made.
      */
      , epoch_to_scale_to_g: map(int,map(int,int))
      // Error tracker for the error correction in the LQTY issuance calculation
      , last_lqty_error: int
      // Error trackers for the error correction in the offset calculation
      , last_ae_error_offset: int
      , last_aeusd_loss_error_offset: int
      }

    //------------------------------------------------------------------------------
    // INIT ENTRYPOINTS
    //------------------------------------------------------------------------------

    entrypoint init() = {
        owner = Some(Call.caller)
      , addresses = None
      , ae = 0
      , total_aeusd_deposits = 0
      , deposits = {}
      , deposit_snapshots = {}
      , front_ends = {}
      , front_end_stakes = {}
      , front_end_snapshots = {}
      , p = Utils.decimal_precision()
      , current_scale = 0
      , current_epoch = 0
      , epoch_to_scale_to_sum = {}
      , epoch_to_scale_to_g = {}
      , last_lqty_error = 0
      , last_ae_error_offset = 0
      , last_aeusd_loss_error_offset = 0
      }

    stateful entrypoint set_addresses(addresses: addresses) =
      //requirement
      only_owner()

      put(state{addresses = Some(addresses)})

      Chain.event(BorrowerOperationsAddressChanged(addresses.borrower_operations))
      Chain.event(TroveManagerAddressChanged(addresses.trove_manager))
      Chain.event(ActivePoolAddressChanged(addresses.active_pool))
      Chain.event(AEUSDTokenAddressChanged(addresses.aeusd_token))
      Chain.event(SortedTrovesAddressChanged(addresses.sorted_troves))
      Chain.event(PriceFeedAddressChanged(addresses.price_feed))
      Chain.event(CommunityIssuanceAddressChanged(addresses.community_issuance))
      Chain.event(DefaultPoolAddressChanged(addresses.default_pool))

      renounce_ownership()

    //------------------------------------------------------------------------------
    // DATA GETTERS
    //------------------------------------------------------------------------------

    function get_ae() = state.ae

    function get_total_aeusd_deposits() = state.total_aeusd_deposits

    //------------------------------------------------------------------------------
    // REWARD CALCULATOR FUNCTIONS FOR DEPOSITOR AND FRONT END
    //------------------------------------------------------------------------------

    /* Calculates the AE gain earned by the deposit since its last snapshots were taken.
    * Given by the formula:  E = d0 * (S - S(0))/P(0)
    * where S(0) and P(0) are the depositor's snapshots of the sum S and product P, respectively.
    * d0 is the last recorded deposit value.
    */
    entrypoint get_depositor_ae_gain(depositor: address): int =
        switch(Map.lookup(depositor,state.deposits))
          None => 0
          Some(deposit) | deposit.initial_value == 0 => 0
          Some(deposit) =>
            //TODO: we assume deposit_snapshots[depositor] has sth?
            let snapshots = state.deposit_snapshots[depositor]
            get_ae_gain_from_snapshots(deposit.initial_value, snapshots)

    function get_ae_gain_from_snapshots(initial_deposit: int, snapshots: snapshots): int =
        /*
        * Grab the sum 'S' from the epoch at which the stake was made. The AE gain may span up to one scale change.
        * If it does, the second portion of the AE gain is scaled by 1e9.
        * If the gain spans no scale change, the second portion will be 0.
        */
        let first_portion = SafeMath.sub(
            state.epoch_to_scale_to_sum[snapshots.epoch][snapshots.scale]
          , snapshots.s
          )
        let second_portion = SafeMath.div(
            state.epoch_to_scale_to_sum[snapshots.epoch][SafeMath.add(snapshots.scale,1)]
          , scale_factor()
          )

        SafeMath.div(
            SafeMath.div(
                initial_deposit * SafeMath.add(first_portion,second_portion)
              , snapshots.p
              )
          , Utils.decimal_precision()
          )

    //------------------------------------------------------------------------------
    // CONSTRAINTS
    //------------------------------------------------------------------------------

    function require_caller_is_active_pool() = with_addresses((addresses) =>
        require( Call.caller == addresses.active_pool.address, "StabilityPool: Caller is not ActivePool")
      )

    function require_caller_is_trove_manager() = with_addresses((addresses) =>
        require(Call.caller == addresses.trove_manager.address, "StabilityPool: Caller is not TroveManager")
      )

    function require_no_under_collateralized_troves() = with_addresses((addresses) =>
        let price = addresses.price_feed.fetch_price()
        let lowest_trove_option = addresses.sorted_troves.get_last()
        switch(lowest_trove_option)
          None => abort("StabilityPool: lowest_trove is None")
          Some(lowest_trove) =>
            let icr = addresses.trove_manager.get_current_icr(lowest_trove, price)
            require(icr >= mcr(), "StabilityPool: Cannot withdraw while there are troves with ICR < MCR")
      )

    function require_user_has_deposit(initial_deposit: int) =
        require(initial_deposit > 0, "StabilityPool: User must have a non-zero deposit")

    function require_user_has_no_deposit(address: address) =
        switch(Map.lookup(address,state.deposits))
          None => ()
          Some(deposit) => require(deposit.initial_value == 0, "StabilityPool: User must have no deposit")

    function require_non_zero_amount(amount: int) =
        require(amount > 0, "StabilityPool: Amount must be non-zero")

    function require_user_has_trove(depositor: address) = with_addresses((addresses) =>
        require( addresses.trove_manager.get_trove_status(depositor) == 1,
          "StabilityPool: caller must have an active trove to withdraw AEGain to"))

    function require_user_has_ae_gain(depositor: address) =
        let ae_gain = get_depositor_ae_gain(depositor)
        require(ae_gain > 0, "StabilityPool: caller must have non-zero AE Gain")

    function require_front_end_not_registered(address: address) =
        switch(Map.lookup(address,state.front_ends))
          None => ()
          Some(front_end) => require(!front_end.registered,
            "StabilityPool: must not already be a registered front end")

    function require_front_end_is_registered_or_zero(address_opt: option(address)) =
        switch(address_opt)
          None => ()
          Some(address) => switch(Map.lookup(address,state.front_ends))
            None => ()
            Some(front_end) => require(!front_end.registered,
              "StabilityPool: Tag must be a registered front end, or no address")

    function  require_valid_kickback_rate(kickback_rate: int) =
        require (kickback_rate =< Utils.decimal_precision(),
          "StabilityPool: Kickback rate must be in range [0,1]" )

    //------------------------------------------------------------------------------
    // EVENTS
    //------------------------------------------------------------------------------

    datatype event
      = StabilityPoolAEBalanceUpdated(int /*newBalance*/)
      | StabilityPoolAEUSDBalanceUpdated(int /*newBalance*/)

      | BorrowerOperationsAddressChanged(IBorrowerOperations /*newBorrowerOperationsAddress*/)
      | TroveManagerAddressChanged(ITroveManager /*newTroveManagerAddress*/)
      | ActivePoolAddressChanged(IActivePool /*newActivePoolAddress*/)
      | DefaultPoolAddressChanged(IDefaultPool /*newDefaultPoolAddress*/)
      | AEUSDTokenAddressChanged(IAEUSDToken /*newAEUSDTokenAddress*/)
      | SortedTrovesAddressChanged(ISortedTroves /*newSortedTrovesAddress*/)
      | PriceFeedAddressChanged(IPriceFeed /*newPriceFeedAddress*/)
      | CommunityIssuanceAddressChanged(ICommunityIssuance /*newCommunityIssuanceAddress*/)

      | P_Updated(int /*P*/)
      | S_Updated(int /*S*/, int /*epoch*/, int /*scale*/)
      | G_Updated(int /*G*/, int /*epoch*/, int /*scale*/)
      | EpochUpdated(int /*currentEpoch*/)
      | ScaleUpdated(int /*currentScale*/)

      | FrontEndRegistered(address /*frontEnd*/, int /*kickbackRate*/)
      | FrontEndTagSet(address /*depositor*/, address /*frontEnd*/)

      | DepositSnapshotUpdated(
            address /*depositor*/
          , string
          /*
          , int P
          , int S
          , int G
          */
          )
      | FrontEndSnapshotUpdated(address /*frontEnd*/, int /*P*/, int /*G*/)
      | UserDepositChanged(address /*depositor*/, int /*newDeposit*/)
      | FrontEndStakeChanged(
            address /*frontEnd*/
          , int /*newFrontEndStake*/
          , address /*depositor*/
          )

      | AEGainWithdrawn(address /*depositor*/, int /*AE*/, int /*AEUSDLoss*/)
      | LQTYPaidToDepositor(address /*depositor*/, int /*LQTY*/)
      | LQTYPaidToFrontEnd(address /*frontEnd*/, int /*LQTY*/)
      | AESent(address /*to*/, int /*amount*/)
//#inject "./dependencies/Ownable.events.aes"

    //------------------------------------------------------------------------------
    // EXTENTIONS
    //------------------------------------------------------------------------------
//#inject "./dependencies/Ownable.functions.aes"
//#inject "./dependencies/LiquityBase.functions.aes"
